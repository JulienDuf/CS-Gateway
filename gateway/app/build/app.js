"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const path = require("path");
const logger = require("morgan");
const cookieParser = require("cookie-parser");
const bodyParser = require("body-parser");
const cors = require("cors");
const session = require("express-session");
const redisStore = require("connect-redis");
const httpProxy = require("http-proxy-middleware");
const querystring = require("querystring");
const fetch = require("node-fetch");
const RedisStore = redisStore(session);
const redis = require("redis");
const auth_1 = require("./route/auth");
const app_config_1 = require("./app-config");
const proxy_config_1 = require("./proxy-config");
class Application {
    static bootstrap() {
        return new Application();
    }
    constructor() {
        this.app = express();
        this.config();
        this.routes();
    }
    config() {
        this.app.use(logger('dev'));
        this.app.use(bodyParser.json());
        this.app.use(bodyParser.urlencoded({ extended: true }));
        this.app.use(cookieParser(process.env.COOKIE_SECRET));
        this.app.use(express.static(path.join(__dirname, '../public')));
        this.app.use(cors());
        let redisClient = redis.createClient({
            host: process.env.REDIS_HOST,
            port: process.env.REDIS_PORT,
            password: process.env.REDIS_PASSWORD
        });
        redisClient.on("error", function (err) {
            console.log("Error " + err);
        });
        this.app.use(session({
            name: 'csgames-session',
            store: new RedisStore({ client: redisClient }),
            resave: false,
            saveUninitialized: true,
            secret: process.env.COOKIE_SECRET,
            cookie: {
                // TODO: secure: true,
                httpOnly: true,
                domain: process.env.APP_URL,
                path: '/',
                expires: app_config_1.appConfig.cookieExpiration
            }
        }));
        this.app.use(function (req, res, next) {
            res.setHeader("Access-Control-Allow-Origin", process.env.APP_URL);
            res.setHeader("X-XSS-Protection", "1; mode=block");
            res.setHeader("Content-security-policy", app_config_1.appConfig.contentSecurityPolicy);
            res.setHeader("X-frame-options", app_config_1.appConfig.xFrameOptions);
            res.setHeader("X-content-type", app_config_1.appConfig.xContentType);
            // TODO: res.setHeader("Strict-transport-security", appConfig.strictTransportSecurity);
            return next();
        });
        this.app.disable('x-powered-by');
    }
    routes() {
        const auth = new auth_1.Auth();
        this.app.use(httpProxy(proxy_config_1.proxyConfig.path, {
            target: proxy_config_1.proxyConfig.target,
            router: proxy_config_1.proxyConfig.router,
            logLevel: proxy_config_1.proxyConfig.logLevel,
            onProxyReq: this.onRequest
        }));
        this.app.use(process.env.GATEWAY_BASE_PATH, auth.router);
        this.app.use((req, res, next) => {
            let err = new Error('Not Found');
            next(err);
        });
        this.app.use((err, req, res, next) => {
            res.status(err.status || 404);
            res.send({
                message: err.message,
                error: {}
            });
        });
    }
    async onRequest(proxyReq, req, res) {
        proxyReq.removeHeader("Cookie");
        proxyReq.setHeader("Authorization", `Bearer ${req.session.access_token}`);
        let now = new Date().getTime() / 1000;
        if ( /*now >= req.session.access_token_expiration*/true) {
            if (req.session.refresh_token) {
                let body = querystring.stringify({
                    client_id: process.env.STS_CLIENT_ID,
                    client_secret: process.env.STS_CLIENT_SECRET,
                    scope: process.env.STS_CLIENT_SCOPES,
                    refresh_token: req.session.refresh_token,
                    grant_type: 'refresh_token'
                });
                try {
                    let response = await fetch(`${process.env.STS_URL}/connect/token`, {
                        method: 'POST',
                        body: body,
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
                    }).then(r => {
                        console.log(r);
                        if (r.status === 200) {
                            return r.json();
                        }
                        console.log("response type not 200");
                        return null;
                    });
                    if (response) {
                        console.log("response, on peut set la session --> " + response);
                        req.session.access_token = response.access_token;
                        req.session.refresh_token = response.refresh_token;
                        console.log("les tokens sont set");
                    }
                    else {
                        console.log("no response");
                        req.session.destroy(err => console.log(err));
                    }
                }
                catch (e) {
                    console.log("Exception lors du renouvellement du token: " + e);
                    req.session.destroy(err => console.log(err));
                }
                console.log("notre session est toujours valide? " + req.sessionID);
                if (req.session && req.session.access_token) {
                    console.log("la session est toujours existante");
                    let payload = JSON.parse(Buffer.from(req.session.access_token.split('.')[1], 'base64').toString());
                    req.session.access_token_expiration = payload.exp;
                    console.log(req.session.access_token_expiration);
                    proxyReq.setHeader("Authorization", `Bearer ${req.session.access_token}`);
                }
                else {
                    // probleme au renouvellement de la session, likely refresh token invvalide, must login
                    console.log("Session invalide apres renouvellement");
                    res.send(401);
                    proxyReq.abort(); // this line drops the request that otherwise still reaches 
                    return;
                }
            }
            else {
                // drop session invalide must login
                console.log("REFRESH TOKEN INVALIDE");
                res.send(401);
                proxyReq.abort(); // this line drops the request that otherwise still reaches 
                return;
            }
        }
        console.log("on set les headers");
        console.log("les headers sont set");
    }
}
exports.Application = Application;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
